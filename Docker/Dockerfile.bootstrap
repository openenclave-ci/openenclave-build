FROM scratch

# The way to get a trusted build is to start with a trusted build. If we don't have one,
# we need to use untrusted components to perform the build, then rebuild with the provisionally trusted components, 
# then compare. If we get different contents, we don't know where the problem is, but we would know there is a problem.

# this can't come from a URL because it won't get unpacked. 
# We need a tight secure CDN to hold golden images. 
ADD ubuntu-base-18.04.3-base-amd64.tar.gz  /
ADD https://oedownload.blob.core.windows.net/oe-build/intel-sgx/libsgx-enclave-common-dev_2.7.100.4-bionic1_amd64.deb?st=2019-10-25T16%3A55%3A41Z&se=2020-10-26T16%3A55%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=nJWY1Q%2FXHkdKRBtfKdjHEbhDZU8zTOZ6Mc0JTjZK2gU%3D /tmp/libsgx-enclave-common-dev+2.7.100.4-bionic_amd64.deb
ADD https://oedownload.blob.core.windows.net/oe-build/intel-sgx/libsgx-enclave-common_2.7.100.4-bionic1_amd64.deb?st=2019-10-25T16%3A55%3A41Z&se=2020-10-26T16%3A55%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=nJWY1Q%2FXHkdKRBtfKdjHEbhDZU8zTOZ6Mc0JTjZK2gU%3D /tmp/libsgx-enclave-common+2.7.100.4-bionic_amd64.deb
ADD https://oedownload.blob.core.windows.net/oe-build/intel-sgx/libsgx-dcap-ql-dev_1.3.101.3-bionic1_amd64.deb?st=2019-10-25T16%3A55%3A41Z&se=2020-10-26T16%3A55%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=nJWY1Q%2FXHkdKRBtfKdjHEbhDZU8zTOZ6Mc0JTjZK2gU%3D /tmp/libsgx-dcap-ql-dev_1.3.101.3-bionic1_amd64.deb
ADD https://oedownload.blob.core.windows.net/oe-build/intel-sgx/libsgx-dcap-ql_1.3.101.3-bionic1_amd64.deb?st=2019-10-25T16%3A55%3A41Z&se=2020-10-26T16%3A55%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=nJWY1Q%2FXHkdKRBtfKdjHEbhDZU8zTOZ6Mc0JTjZK2gU%3D /tmp/libsgx-dcap-ql_1.3.101.3-bionic1_amd64.deb
#ADD https://oebuildinfo.blob.core.windows.net/buildinfo/ubuntu-base-18.04.3-base-amd64.tar.gz.sig

#
# Check the signature.

#
# Rewrite sources.list to only get from CDN. We would like to trust ubu, but don't
# 2Do: setup CDN and build dummy 

#
# Replace apt with downloaded and verified deb using dpkg -i
#
# RUN DEBIAN_FRONTEND=noninteractive apt -y update --fix-missing
# RUN DEBIAN_FRONTEND=noninteractive apt -y dist-upgrade# RUN DEBIAN_FRONTEND=noninteractive apt-get -y install musl musl-dev ninja-build python3 xz-utils libxml2 libgcc-7-dev make git zlib1g zlib1g-dev libreadline-dev libsqlite3-dev libbz2-dev libffi-dev liblzma-dev python-openssl gcc-7 g++-7 gpg libssl-dev dpkg-dev


ADD https://oedownload.blob.core.windows.net/oe-build/ubuntu-18.04/secure-build.pkgs.tar.gz?st=2020-01-03T19%3A01%3A31Z&se=2020-01-04T19%3A01%3A31Z&sp=rl&sv=2018-03-28&sr=b&sig=GPMFdDh%2Br8DuAHuZxPgHAv5VyR1vGayWkPU6ZgP99ZY%3D /tmp/secure-build.pkgs.tar.gz

ADD https://oedownload.blob.core.windows.net/oe-build/ubuntu-18.04/secure-build.pkgs.tar.gz?st=2020-01-03T19%3A02%3A45Z&se=2020-01-04T19%3A02%3A45Z&sp=rl&sv=2018-03-28&sr=c&sig=zR3zmysx%2F8P8aqKAFrofh5tcJ7C8QWEHRd6wWhv6fgs%3D /tmp//secure-build.pkgs.tar.gz.sha256sum
ADD package-list /tmp
ADD install-packages.sh /tmp

#
# dpkg can result in some unresolved dependencies. dpkg --configure should resolve them
WORKDIR /tmp
RUN /bin/bash -c "mkdir -p deb && pushd deb &&  tar xvfz /tmp/secure-build.pkgs.tar.gz && popd && /tmp/install-packages.sh /tmp/package-list /tmp/deb"


RUN /bin/bash -c "ln -sf /usr/bin/gcc-7 /usr/bin/gcc ; ln -sf /usr/bin/g++-7 /usr/bin/g++"

# Now cmake. 
# 2do: Cmake should be coming from our CDN. Even if using the debian package was a good idea, the
# cmake package version is 3.10.  We require 3.13 minimum.
ADD https://github.com/Kitware/CMake/releases/download/v3.15.1/cmake-3.15.1.tar.gz  /tmp/cmake-3.15.1.tar.gz

#
COPY build_toolchain.sh /tmp
COPY signatures/ /tmp
COPY pkglist.base/ /tmp

RUN rm -rf /usr/local ; mkdir -p /usr/local

#
#Unpack the golden cmake
#RUN tar xvfz cmake-3.15.1-Linux-x86_64.tar.gz
#RUN /bin/bash -c "\
#    pushd . ;\
#    cd cmake-3.15.1-Linux-x86_64 ; \
#    cp -Rf * /usr/local/ ; \
#    popd \
#    "
ENV PATH=/usr/local/bin:/bin:/sbin:/usr/bin

#
# 2do: Get this file from CDN and check signature
# Skip this because it creates a clang which is incompatible with source build
##ADD http://releases.llvm.org/7.0.1/clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-18.04.tar.xz /tmp
##ADD http://releases.llvm.org/7.0.1/clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-18.04.tar.xz.sig /tmp

# linker
#ADD https://github.com/llvm/llvm-project/releases/download/llvmorg-7.1.0/lld-7.1.0.src.tar.xz /tmp
#ADD https://github.com/llvm/llvm-project/releases/download/llvmorg-7.1.0/lld-7.1.0.src.tar.xz.sig /tmp
ADD https://oedownload.blob.core.windows.net/oe-build/llvm-src/lld-7.1.0.src.tar.xz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/lld-7.1.0.src.tar.xz
ADD  https://oeverify.blob.core.windows.net/oe-build/llvm-src/lld-7.1.0.src.tar.xz.sig?st=2019-11-01T16%3A09%3A42Z&se=2020-11-02T16%3A09%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=fL4Q3n0VIicenrz2yxm%2FWsS2qHBwWxm%2BeF8eiqOnAA0%3D /tmp/lld-7.1.0.src.tar.xz.sig

# compiler
#ADD http://releases.llvm.org/7.1.0/cfe-7.1.0.src.tar.xz /tmp
#ADD http://releases.llvm.org/7.1.0/cfe-7.1.0.src.tar.xz.sig /tmp
ADD   https://oedownload.blob.core.windows.net/oe-build/llvm-src/cfe-7.1.0.src.tar.xz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/cfe-7.1.0.src.tar.xz
ADD   https://oeverify.blob.core.windows.net/oe-build/llvm-src/cfe-7.1.0.src.tar.xz.sig?st=2019-11-01T16%3A09%3A42Z&se=2020-11-02T16%3A09%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=fL4Q3n0VIicenrz2yxm%2FWsS2qHBwWxm%2BeF8eiqOnAA0%3D /tmp/cfe-7.1.0.src.tar.xz.sig

# compiler run time
#ADD http://releases.llvm.org/7.1.0/compiler-rt-7.1.0.src.tar.xz  /tmp
#ADD http://releases.llvm.org/7.1.0/compiler-rt-7.1.0.src.tar.xz.sig  /tmp
ADD  https://oedownload.blob.core.windows.net/oe-build/llvm-src/compiler-rt-7.1.0.src.tar.xz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/compiler-rt-7.1.0.src.tar.xz
ADD  https://oeverify.blob.core.windows.net/oe-build/llvm-src/compiler-rt-7.1.0.src.tar.xz.sig?st=2019-11-01T16%3A09%3A42Z&se=2020-11-02T16%3A09%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=fL4Q3n0VIicenrz2yxm%2FWsS2qHBwWxm%2BeF8eiqOnAA0%3D /tmp/compiler-rt-7.1.0.src.tar.xz.sig

# libc++
#ADD http://releases.llvm.org/7.1.0/libcxx-7.1.0.src.tar.xz /tmp
#ADD http://releases.llvm.org/7.1.0/libcxx-7.1.0.src.tar.xz.sig /tmp
ADD  https://oedownload.blob.core.windows.net/oe-build/llvm-src/libcxx-7.1.0.src.tar.xz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/libcxx-7.1.0.src.tar.xz
ADD  https://oeverify.blob.core.windows.net/oe-build/llvm-src/libcxx-7.1.0.src.tar.xz.sig?st=2019-11-01T16%3A09%3A42Z&se=2020-11-02T16%3A09%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=fL4Q3n0VIicenrz2yxm%2FWsS2qHBwWxm%2BeF8eiqOnAA0%3D /tmp/libcxx-7.1.0.src.tar.xz.sig

# libunwind
#ADD http://releases.llvm.org/7.1.0/libunwind-7.1.0.src.tar.xz /tmp
#ADD http://releases.llvm.org/7.1.0/libunwind-7.1.0.src.tar.xz.sig /tmp
ADD  https://oedownload.blob.core.windows.net/oe-build/llvm-src/libunwind-7.1.0.src.tar.xz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/libunwind-7.1.0.src.tar.xz
ADD  https://oeverify.blob.core.windows.net/oe-build/llvm-src/libunwind-7.1.0.src.tar.xz.sig?st=2019-11-01T16%3A09%3A42Z&se=2020-11-02T16%3A09%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=fL4Q3n0VIicenrz2yxm%2FWsS2qHBwWxm%2BeF8eiqOnAA0%3D /tmp/libunwind-7.1.0.src.tar.xz.sig

# tools extra
#ADD http://releases.llvm.org/7.1.0/clang-tools-extra-7.1.0.src.tar.xz  /tmp
#ADD http://releases.llvm.org/7.1.0/clang-tools-extra-7.1.0.src.tar.xz.sig  /tmp
ADD  https://oedownload.blob.core.windows.net/oe-build/llvm-src/clang-tools-extra-7.1.0.src.tar.xz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/clang-tools-extra-7.1.0.src.tar.xz
ADD  https://oeverify.blob.core.windows.net/oe-build/llvm-src/clang-tools-extra-7.1.0.src.tar.xz.sig?st=2019-11-01T16%3A09%3A42Z&se=2020-11-02T16%3A09%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=fL4Q3n0VIicenrz2yxm%2FWsS2qHBwWxm%2BeF8eiqOnAA0%3D /tmp/clang-tools-extra-7.1.0.src.tar.xz.sig

# polly
#ADD http://releases.llvm.org/7.1.0/polly-7.1.0.src.tar.xz  /tmp
#ADD http://releases.llvm.org/7.1.0/polly-7.1.0.src.tar.xz.sig  /tmp
ADD  https://oedownload.blob.core.windows.net/oe-build/llvm-src/polly-7.1.0.src.tar.xz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/polly-7.1.0.src.tar.xz
ADD  https://oeverify.blob.core.windows.net/oe-build/llvm-src/polly-7.1.0.src.tar.xz.sig?st=2019-11-01T16%3A09%3A42Z&se=2020-11-02T16%3A09%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=fL4Q3n0VIicenrz2yxm%2FWsS2qHBwWxm%2BeF8eiqOnAA0%3D /tmp/polly-7.1.0.src.tar.xz.sig
#
# We bootstrap with a prebuilt compiler, but then build the toolchain and check the signatures against the 
# prebuilt. If the signatures don't match we have a security issue.
# 
#ADD http://releases.llvm.org/7.1.0/llvm-7.1.0.src.tar.xz /tmp
#ADD http://releases.llvm.org/7.1.0/llvm-7.1.0.src.tar.xz.sig /tmp
ADD  https://oedownload.blob.core.windows.net/oe-build/llvm-src/llvm-7.1.0.src.tar.xz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/llvm-7.1.0.src.tar.xz
ADD  https://oeverify.blob.core.windows.net/oe-build/llvm-src/llvm-7.1.0.src.tar.xz.sig?st=2019-11-01T16%3A09%3A42Z&se=2020-11-02T16%3A09%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=fL4Q3n0VIicenrz2yxm%2FWsS2qHBwWxm%2BeF8eiqOnAA0%3D /tmp/llvm-7.1.0.src.tar.xz.sig

#RUN tar xvfJ /tmp/clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-18.04.tar.xz 
#RUN /bin/bash -c "\
#    pushd . ;\
#    cd clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-18.04 ; \
#    cp -Rf * /usr/local/ ; \
#    ldconfig /usr/local/lib ; \
#    popd \
#    "
RUN mkdir -p /src
RUN mkdir -p /build
RUN mkdir -p /output

WORKDIR /src

# Check the signature, build then check the sha256 hash of the binaries
RUN tar xvfz /tmp/cmake-3.15.1.tar.gz
RUN tar xvfJ /tmp/llvm-7.1.0.src.tar.xz
RUN tar xvfJ /tmp/lld-7.1.0.src.tar.xz
RUN tar xvfJ /tmp/cfe-7.1.0.src.tar.xz
RUN tar xvfJ /tmp/compiler-rt-7.1.0.src.tar.xz 
RUN tar xvfJ /tmp/libcxx-7.1.0.src.tar.xz
RUN tar xvfJ /tmp/libunwind-7.1.0.src.tar.xz

RUN /bin/bash -c "\
    pushd . ; \
    cd /src/cmake-3.15.1 ;\
    ./bootstrap ; \
    make  ; \
    make install ; \
    popd ; \
    "
RUN git clone https://github.com/ninja-build/ninja.git
RUN /bin/bash -c "pushd . ; cd ninja; git checkout release ; popd"

RUN bash -c 'chmod a+x /tmp/build_toolchain.sh'

RUN bash -c "git clone https://github.com/ocaml/ocaml.git"
RUN bash -c "git clone https://github.com/python/cpython.git"

# cpython has to be edited or it won't bild the zlib package and that breaks a bunch of stuff
COPY hacks/cpython/Setup /tmp


RUN mkdir -p /tmp/buildinfo
COPY build/buildinfo/. /tmp/buildinfo/
ADD  https://oedownload.blob.core.windows.net/oe-build/esy/esy-0.5.8.tgz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/esy-0.5.8.tgz
ADD  https://oedownload.blob.core.windows.net/oe-build/esy/esy-solve-cudf-0.1.10.tgz?st=2019-11-01T16%3A12%3A28Z&se=2020-11-02T16%3A12%3A00Z&sp=rl&sv=2018-03-28&sr=c&sig=qHu9rtuvCR6f5d9esJ7w6t7aaEp%2F4gyE5hmDd8uM0d8%3D /tmp/eys-solve-cudf-0.1.10.tgz


# Add the intel sgx software

CMD ["/bin/bash"]

